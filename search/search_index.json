{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"atpbar","text":"<p>Progress bars for threading and multiprocessing tasks on the terminal and Jupyter Notebook.</p> <p></p>"},{"location":"#introduction","title":"Introduction","text":"<p>atpbar can display multiple progress bars simultaneously growing to show the progress of each iteration of loops in threading or multiprocessing tasks. atpbar can display progress bars on the terminal and Jupyter Notebook.</p> <p>atpbar started its development in 2015 and was the sub-package progressbar of alphatwirl. It became an independent package in 2019.</p> <p>You can try it on Jupyter Notebook online: </p>"},{"location":"#install","title":"Install","text":"<p>You can install with <code>pip</code> from PyPI:</p> <pre><code>pip install -U atpbar\n</code></pre> <p>To install with Jupyter Notebook support, use the following command:</p> <pre><code>pip install -U atpbar[jupyter]\n</code></pre>"},{"location":"quick/","title":"Quick Start","text":"<p>This short tutorial shows how to use <code>atpbar</code> with simple examples.</p>"},{"location":"quick/#installation","title":"Installation","text":"<p>If <code>atpbar</code> is not installed, you can install it with the <code>pip</code> command on the terminal.</p> <pre><code>pip install -U atpbar\n</code></pre>"},{"location":"quick/#how-to-use","title":"How to use","text":""},{"location":"quick/#start-python","title":"Start Python","text":"<p>You can try the examples in this tutorial in the Python interactive shell.</p> <pre><code>$ python\nPython 3.10.13 (...)\n...\n...\n&gt;&gt;&gt;\n</code></pre>"},{"location":"quick/#import-packages","title":"Import packages","text":"<p>Import <code>atpbar</code> and other objects that we will use in the examples.</p> <pre><code>from random import randint\nfrom time import sleep\nfrom atpbar import atpbar\n</code></pre>"},{"location":"quick/#one-loop","title":"One loop","text":"<p>The <code>atpbar</code> can wrap an iterable to show a progress bar for the iterations.</p> <pre><code>n = randint(1000, 10000)\nfor _ in atpbar(range(n)):\n    sleep(0.001)\n</code></pre> <p>This example randomly selects the number of iterations and, in each iteration, sleeps for a short time.</p> <p>The progress bar will be shown as the loop progresses.</p> <pre><code>  51.25% ::::::::::::::::::::                     |     4132 /     8062 |:  range(0, 8062)\n</code></pre> <p>Note: <code>atpbar</code> won't show a progress bar if the length of the iterable cannot be obtained by <code>len()</code>.</p>"},{"location":"quick/#nested-loops","title":"Nested loops","text":"<p>The <code>atpbar</code> can show progress bars for nested loops.</p> <pre><code>for i in atpbar(range(4), name='Outer'):\n    n = randint(1000, 10000)\n    for _ in atpbar(range(n), name=f'Inner {i}'):\n        sleep(0.001)\n</code></pre> <p>This example iterates over an outer loop four times. In each iteration, it iterates over an inner loop. The progress bars for both the outer and inner loops are shown.</p> <pre><code> 100.00% :::::::::::::::::::::::::::::::::::::::: |     3287 /     3287 |:  Inner 0\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     5850 /     5850 |:  Inner 1\n  50.00% ::::::::::::::::::::                     |        2 /        4 |:  Outer\n  34.42% :::::::::::::                            |     1559 /     4529 |:  Inner 2\n</code></pre> <p>In the snapshot of the progress bars above, the outer loop is in its 3rd iteration. The inner loop has been completed twice and is running the third. The progress bars for the completed tasks move up. The progress bars for the active tasks are growing at the bottom.</p>"},{"location":"quick/#threading","title":"Threading","text":"<p>As the last example, we show how to use <code>atpbar</code> with threading. We will use the <code>ThreadPoolExecutor</code> from the <code>concurrent.futures</code> module.</p> <p>Import <code>ThreadPoolExecutor</code> and also <code>flushing</code> from <code>atpbar</code>.</p> <pre><code>from concurrent.futures import ThreadPoolExecutor\nfrom atpbar import flushing\n</code></pre> <p>Define a function that will be executed by the threads.</p> <pre><code>def func(n, name):\n    for _ in atpbar(range(n), name=name):\n        sleep(0.001)\n</code></pre> <p>We will submit ten jobs each runs the <code>func</code> function to five threads.</p> <pre><code>n_workers = 5\nn_jobs = 10\n\nwith flushing(), ThreadPoolExecutor(max_workers=n_workers) as executor:\n    for i in range(n_jobs):\n        n = randint(1000, 10000)\n        f = executor.submit(func, n, name=f'Job {i}')\n</code></pre> <p>The context manager <code>flushing()</code> exits after the progress bars have finished updating.</p> <p>The progress bars will be simultaneously updated for concurrent jobs.</p> <pre><code> 100.00% :::::::::::::::::::::::::::::::::::::::: |     2326 /     2326 |:  Job 0\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     2971 /     2971 |:  Job 1\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     1386 /     1386 |:  Job 6\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     5316 /     5316 |:  Job 3\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     7786 /     7786 |:  Job 4\n 100.00% :::::::::::::::::::::::::::::::::::::::: |     5500 /     5500 |:  Job 5\n  91.33% ::::::::::::::::::::::::::::::::::::     |     8188 /     8965 |:  Job 2\n  39.85% :::::::::::::::                          |     3842 /     9642 |:  Job 7\n  34.89% :::::::::::::                            |     2882 /     8260 |:  Job 8\n  29.11% :::::::::::                              |      414 /     1422 |:  Job 9\n</code></pre>"},{"location":"quick/#for-more-information","title":"For more information","text":"<p>This is the end of the quick start tutorial. For more information, see the Users Guide.</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/break-exception/","title":"A <code>break</code> and an exception","text":"<p>When the loop ends with a <code>break</code> or an exception, the progress bar stops with the last complete iteration.</p> <p>For example, the loop in the following code breaks during the 1235th iteration.</p> <pre><code>for i in atpbar(range(2000)):\n    if i == 1234:\n        break\n    sleep(0.0001)\n</code></pre> <p>Since <code>i</code> starts with <code>0</code>, when <code>i</code> is <code>1234</code>, the loop is in its 1235th iteration. The last complete iteration is 1234. The progress bar stops at 1234.</p> <pre><code>  61.70% ::::::::::::::::::::::::                 |     1234 /     2000 |:  range(0, 2000)\n</code></pre> <p>As an example of an exception, in the following code, an exception is thrown during the 1235th iteration.</p> <pre><code>for i in atpbar(range(2000)):\n    if i == 1234:\n        raise Exception\n    sleep(0.001)\n</code></pre> <p>The progress bar stops at the last complete iteration, 1234.</p> <pre><code>  61.70% ::::::::::::::::::::::::                 |     1234 /     2000 |:  range(0, 2000)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 3, in &lt;module&gt;\nException\n</code></pre> <p>This feature works as well with nested loops, threading, and multiprocessing. For example, in the following code, the loops in threads break at 1235th iteration.</p> <pre><code>def func(n, name):\n    for i in atpbar(range(n), name=name):\n        if i == 1234:\n            break\n        sleep(0.001)\n\n\nn_workers = 5\nn_jobs = 10\n\nwith flushing(), ThreadPoolExecutor(max_workers=n_workers) as executor:\n    for i in range(n_jobs):\n        n = randint(3000, 10000)\n        f = executor.submit(func, n, name=f'Job {i}')\n</code></pre> <p>All progress bars stop at 1234.</p> <pre><code>  23.97% :::::::::                                |     1234 /     5149 |:  Job 2\n  33.32% :::::::::::::                            |     1234 /     3703 |:  Job 4\n  35.09% ::::::::::::::                           |     1234 /     3517 |:  Job 0\n  13.47% :::::                                    |     1234 /     9162 |:  Job 3\n  27.35% ::::::::::                               |     1234 /     4512 |:  Job 1\n  32.07% ::::::::::::                             |     1234 /     3848 |:  Job 6\n  29.04% :::::::::::                              |     1234 /     4250 |:  Job 5\n  21.01% ::::::::                                 |     1234 /     5872 |:  Job 8\n  13.70% :::::                                    |     1234 /     9006 |:  Job 7\n  36.51% ::::::::::::::                           |     1234 /     3380 |:  Job 9\n</code></pre>"},{"location":"features/jupyter/","title":"On Jupyter Notebook","text":"<p>On Jupyter Notebook, <code>atpbar</code> shows progress bars based on widgets.</p> <p></p> <p>You can try interactively online: </p>"},{"location":"features/non-tty/","title":"Non TTY device","text":"<p>If neither on Jupyter Notebook or on a TTY device, <code>atpbar</code> is not able to show progress bars. <code>atpbar</code> occasionally prints the status.</p> <pre><code>03/04 09:17 :     1173 /     7685 ( 15.26%): Thread 0\n03/04 09:17 :     1173 /     6470 ( 18.13%): Thread 3\n03/04 09:17 :     1199 /     1199 (100.00%): Thread 4\n03/04 09:18 :     1756 /     2629 ( 66.79%): Thread 2\n03/04 09:18 :     1757 /     7685 ( 22.86%): Thread 0\n03/04 09:18 :     1757 /     6470 ( 27.16%): Thread 3\n03/04 09:19 :     2342 /     2629 ( 89.08%): Thread 2\n</code></pre>"},{"location":"guide/","title":"User Guide","text":""},{"location":"guide/disable/","title":"How to disable progress bars","text":"<p>The function <code>disable()</code> disables <code>atpbar</code>; progress bars will not be shown.</p> <pre><code>from atpbar import disable\n\ndisable()\n</code></pre> <p>This function needs to be called before <code>atpbar</code> or <code>find_reporter()</code> is used, typically at the beginning of the program.</p>"},{"location":"guide/multiprocessing-pool/","title":"Multiprocessing.Pool","text":"<p>An example with <code>multiprocessing.Pool</code>:</p> <pre><code>from multiprocessing import Pool, set_start_method\nfrom random import randint\nfrom time import sleep\n\nfrom atpbar import atpbar, find_reporter, flushing, register_reporter\n\nset_start_method('fork', force=True)\n\n\ndef func(n, name):\n    for _ in atpbar(range(n), name=name):\n        sleep(0.001)\n\n\nn_processes = 4\nn_jobs = 10\n\nargs = [(randint(1000, 10000), f'Job {i}') for i in range(n_jobs)]\n\nwith (\n    flushing(),\n    Pool(\n        n_processes,\n        initializer=register_reporter,\n        initargs=(find_reporter(),),\n    ) as pool,\n):\n    pool.starmap(func, args)\n</code></pre>"},{"location":"guide/multiprocessing-process/","title":"Multiprocessing.Process","text":"<p>An example with <code>multiprocessing.Process</code>:</p> <pre><code>from multiprocessing import Process, set_start_method\nfrom random import randint\nfrom time import sleep\n\nfrom atpbar import atpbar, find_reporter, flushing, register_reporter\n\nset_start_method('fork', force=True)\n\n\ndef func(n, name, reporter):\n    register_reporter(reporter)\n    for _ in atpbar(range(n), name=name):\n        sleep(0.001)\n\n\nn_processes = 5\n\nwith flushing():\n    processes = []\n    for i in range(n_processes):\n        n = randint(1000, 10000)\n        p = Process(target=func, args=(n, f'Job {i}', find_reporter()))\n        p.start()\n        processes.append(p)\n    for p in processes:\n        p.join()\n</code></pre>"},{"location":"guide/process-pool-executor/","title":"ProcessPoolExecutor","text":"<p>An example with <code>concurrent.futures.ProcessPoolExecutor</code>:</p> <pre><code>import multiprocessing\nfrom concurrent.futures import ProcessPoolExecutor\nfrom random import randint\nfrom time import sleep\n\nfrom atpbar import atpbar, find_reporter, flushing, register_reporter\n\nmultiprocessing.set_start_method('fork', force=True)\n\n\ndef func(n, name):\n    for _ in atpbar(range(n), name=name):\n        sleep(0.001)\n\n\nn_workers = 5\nn_jobs = 10\n\nwith (\n    flushing(),\n    ProcessPoolExecutor(\n        max_workers=n_workers,\n        initializer=register_reporter,\n        initargs=(find_reporter(),),\n    ) as executor,\n):\n    for i in range(n_jobs):\n        n = randint(1000, 10000)\n        f = executor.submit(func, n, name=f'Job {i}')\n</code></pre>"},{"location":"guide/thread-pool-executor/","title":"ThreadPoolExecutor","text":"<p>An example with <code>concurrent.futures.ThreadPoolExecutor</code>:</p> <pre><code>from concurrent.futures import ThreadPoolExecutor\nfrom random import randint\nfrom time import sleep\n\nfrom atpbar import atpbar, flushing\n\n\ndef func(n, name):\n    for _ in atpbar(range(n), name=name):\n        sleep(0.001)\n\n\nn_workers = 5\nn_jobs = 10\n\nwith flushing(), ThreadPoolExecutor(max_workers=n_workers) as executor:\n    for i in range(n_jobs):\n        n = randint(1000, 10000)\n        f = executor.submit(func, n, name=f'Job {i}')\n</code></pre>"},{"location":"guide/threading-thread/","title":"Threading","text":"<p>An example with <code>threading.Thread</code>:</p> <pre><code>from random import randint\nfrom threading import Thread\nfrom time import sleep\n\nfrom atpbar import atpbar, flushing\n\n\ndef func(n, name):\n    for _ in atpbar(range(n), name=name):\n        sleep(0.001)\n\n\nn_threads = 5\n\nwith flushing():\n    threads = []\n    for i in range(n_threads):\n        n = randint(1000, 10000)\n        t = Thread(target=func, args=(n, f'Thread {i}'))\n        t.start()\n        threads.append(t)\n    for t in threads:\n        t.join()\n</code></pre>"}]}